spring:
  application:
    name: "gatewayserver"
  config:
    import: "optional:configserver:http://localhost:8071/" #если нет доступа то мы все равно включим микросервис
  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              #Также если указать false, то в /gateway/routes мы не будем видеть дефолтные пути, если настроим свой роутинг
              enabled: true # говорит чтоб подключилось с эврикой и смотрело какие микросервисы есть в registry
              lower-case-service-id: true
          httpclient:
            connect-timeout: 1000 # время на подключение к серверу, не получение ответа, а просто подключение
            response-timeout: 10s # время на получение уже ответа
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s

management:
  endpoints:
    web:
      exposure:
        include: "*" #это значит чтоб все возможные энд поинты были доступны
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true

info:
  app:
    name: "gatewayserver"
    description: "Bank Gate Way Server Application"
    version: "1.0"

logging:
  level:
    avlyakulov:
      timur:
        gatewayserver: DEBUG

resilience4j.circuitbreaker:
  configs:
    default: #название нашего circuit breaker котореое я указал в главном файле
      sliding-window-size: 10 #сколько нужно обработать запросов чтоб принять решение о смене состояние с close -> open
      permitted-number-of-calls-in-half-open-state: 2 #сколько запросов будет обрабатываться в half open state
      failure-rate-threshold: 50 #процент если 50% запросов падают, то мы можем пойти в открытое состояние
      wait-duration-in-open-state: 10000 #10 секунд ждет в open state чтоб потом перейти в half open state